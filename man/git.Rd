% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git.R
\name{git}
\alias{git}
\alias{get_commit_msgs}
\alias{get_pr_msgs}
\alias{get_pr_sha}
\alias{lint_commit_msg}
\alias{get_recent_tag}
\alias{git_checkout}
\alias{is_git}
\alias{scrape_commits}
\title{Git Utilities}
\usage{
git(..., echo_cmd = TRUE, echo = FALSE)

get_commit_msgs(sha = NULL, n = 1)

get_pr_msgs(branch = NULL)

get_pr_sha(branch = NULL)

lint_commit_msg(x)

get_recent_tag()

git_checkout(branch = NULL)

is_git()

scrape_commits(n)
}
\arguments{
\item{...}{Additional arguments passed to the system
command-line \verb{git <command> [<args>]} call.}

\item{echo_cmd}{Whether to print the command to run to the screen.}

\item{echo}{Whether to print the standard output and error
to the screen. Note that the order of the standard output and error
lines are not necessarily correct, as standard output is typically
buffered. If the standard output and/or error is redirected to a
file or they are ignored, then they also not echoed.}

\item{sha}{Character. Commit SHA or hash to pull messages from.
If \code{NULL}, the most recent commit on the current branch.}

\item{n}{Numeric. How far back to go from current HEAD. Same as the
command line \verb{git log -n} parameter.}

\item{branch}{Character. The name of a branch, typically a
feature branch.}

\item{x}{A single commit message from \code{get_commit_msgs()}.}
}
\description{
Provides functionality for system-level Git commands from within R.
}
\section{Functions}{
\itemize{
\item \code{git}: Execute a \code{git} command line call from within R.

\item \code{get_commit_msgs}: Get the commit messages corresponding to the commit \code{sha}.
Adds author and \code{sha} attributes to each commit for downstream use.

\item \code{get_pr_msgs}: Gets the commit messages for the \emph{current} branch relative to
the \code{origin/master} branch in the remote. Typically these "new" commits
that would be merged as part of a PR to \code{origin/master}.

\item \code{get_pr_sha}: Gets the commit SHA1 \emph{current} branch relative to
the \code{origin/master} branch in the remote.

\item \code{lint_commit_msg}: Lint a commit message for typical commit style best practices for \code{git}.

\item \code{get_recent_tag}: Get the \emph{most} recent \code{git} tag.

\item \code{git_checkout}: \verb{git checkout} as a branch if doesnt' exist.

\item \code{is_git}: Is current working directory a \code{git} repository?

\item \code{scrape_commits}: Scrape \code{n} commit message for useful changelog commits.
}}

\examples{
\dontrun{
git("status", "-s")

get_commit_msgs()

get_commit_msgs(n = 3)

get_pr_msgs()

# lint most recent 3 commit message
lapply(get_commit_msgs(n = 3), lint_commit_msg)

# for a PR `branch` -> `remotes/origin/master`
lapply(get_pr_msgs(), lint_commit_msg)           # current branch
lapply(get_pr_msgs("feature"), lint_commit_msg)  # `feature` branch

get_recent_tag()
}
}

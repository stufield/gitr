% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git.R
\name{git}
\alias{git}
\alias{is_git}
\alias{git_version}
\alias{git_checkout}
\title{Git Utilities}
\usage{
git(..., echo_cmd = TRUE)

is_git()

git_version()

git_checkout(branch = NULL)
}
\arguments{
\item{...}{Additional arguments passed to the system
command-line \verb{git <command> [<args>]} call.}

\item{echo_cmd}{Logical. Whether to print the command to run to the console.}

\item{branch}{Character. The path name to a file.}
}
\description{
Provides functionality for system-level git commands from within R.
}
\section{Functions}{
\itemize{
\item \code{git()}: Execute a \code{git} command line call from within R.

\item \code{is_git()}: Is current working directory a \code{git} repository?

\item \code{git_version()}: Gets the version of git in use.

\item \code{git_checkout()}: \verb{git checkout} as a branch if doesn't exist. Branch
oriented workflow for switching between branches.

}}
\examples{
\dontrun{
git("status", "-s")

get_commit_msgs()

get_commit_msgs(n = 3)

get_pr_msgs()

# lint most recent 3 commit message
lapply(get_commit_msgs(n = 3), lint_commit_msg)

# for a PR `branch` -> `remotes/origin/{main,master}`
lapply(get_pr_msgs(), lint_commit_msg)           # current branch
lapply(get_pr_msgs("feature"), lint_commit_msg)  # `feature` branch

get_recent_tag()
}
}
